"""
Django settings for graderng project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY', '#d6a5ogl)__t+h8!jx)$0vi)wk7znxscg)58hm+ljncg=@^j6k')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get("DJANGO_ENV", "debug") == "debug")

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'filebrowser',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'django_cleanup.apps.CleanupConfig',
    'django_extensions',

    'app',
    'grader',
    'job',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'graderng.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'graderng.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'OPTIONS': {'charset': 'utf8mb4'},
        'NAME': os.environ.get('MYSQL_DBNAME', 'test'),
        'USER': os.environ.get('MYSQL_USERNAME', 'root'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', ''),
        'HOST': os.environ.get('MYSQL_HOST', '127.0.0.1'),
        'PORT': os.environ.get('MYSQL_PORT', '3306'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# LOGGING

if not DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "root": {"level": "ERROR", "handlers": ["console"]},
        "handlers": {
            "console": {
                "level": "ERROR",
                'class': 'logging.StreamHandler',
                "formatter": "default",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["console"],
                "level": "ERROR",
                "propagate": True
            },
        },
        "formatters": {
            "default": {
                "format": (
                    u"%(asctime)s [%(levelname)-8s] "
                    "(%(module)s.%(funcName)s) %(message)s"
                ),
                "datefmt": "%Y-%m-%d %H:%M:%S",
            },
        },
    }


# FileBrowser

FILEBROWSER_DIRECTORY = os.environ.get("DJANGO_UPLOADS_DIRECTORY", 'uploads/')

FILEBROWSER_EXTENSIONS = {
    'Testcase': ['.in', '.out', '.zip']
}

FILEBROWSER_MAX_UPLOAD_SIZE = 100 * 1024 * 1024  # 100MB


# Redis

REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD")

REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")

REDIS_PORT = os.environ.get("REDIS_PORT", 6379)

REDIS_EXPIRE_TIME = os.environ.get("REDIS_EXPIRE_TIME", 7)  # days


# Celery

CELERY_BROKER_URL = CELERY_RESULT_BACKEND = "redis://:{}@{}:{}/0".format(
    REDIS_PASSWORD or "", REDIS_HOST, REDIS_PORT)

CELERY_BROKER_TRANSPORT_OPTIONS = {
    'priority_steps': list(range(10)),
    'queue_order_strategy': 'priority',
    'visibility_timeout': 10*60,  # 10 mins
}

CELERY_TASK_ROUTES = {
    "grader.tasks.send_feedback": {"queue": "misc"},
    "grader.tasks.grade_testcase": {"queue": "testcase"},
    "job.tasks.*": {"queue": "misc"}
}

CELERY_ACCEPT_CONTENT = ["pickle"]

CELERY_TASK_SERIALIZER = CELERY_RESULT_SERIALIZER = "pickle"


# SCELE

SCELE_URL = os.environ.get(
    "SCELE_URL", "http://127.0.0.1/webservice/rest/server.php")

SCELE_TOKEN = os.environ.get("SCELE_TOKEN", "3c3912a9e1c84b749892aa98cf403512")


# CORS

CORS_ORIGIN_ALLOW_ALL = True


# PROXY

HTTP_PROXY = os.environ.get("HTTP_PROXY")


# MOSS

MOSS_USER_ID = os.environ.get("MOSS_USER_ID")


# MISC

DISK_CACHE_ENABLE = os.environ.get("DISK_CACHE_ENABLE", True)

SANDBOX_FILESIZE_LIMIT = os.environ.get("SANDBOX_FILESIZE_LIMIT", 30)  # MB
